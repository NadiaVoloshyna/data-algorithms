## request
Develop a program that can utilise a series of points in a 2-dimensional coordinate system for generating a graph,
computing a minimum spanning tree, and for rendering the graph as an image.
Your program must be able to find all neighbours of each of the points (or point objects) that are located within a specified distance,
and it must also be able to generate a minimum spanning tree of all points.

## analysis
The inputs to the program are the following:
- Values for x: 1-100
- Values for y:
  20,93,72,35,54,95,25,37,29,72,65,66,49,43,35,61,97,66,64,22,83,69,19,21,69,40,35,81,15,41,74,12,3,65,31,12,48,68,41,40,
  99,13,70,30,20,35,84,96,1,93,61,83,24,27,93,86,96,43,10,51,27,87,40,35,83,44,15,89,71,79,25,84,43,49,66,0,88,80,4,3,74,
  10,41,45,75,34,41,44,50,99,41,37,26,6,94,94,76,48,32,42
- String containing all y values
  '20937235549525372972656649433561976664228369192169403581154174123653112486841409913703020358496193618324279386964310512
  787403583441589717925844349660888043741041457534414450994137266949476483242'
- SHA256 hash of y values (string)
  "5c14e4599f1d2a39abe6b487ac2a5415c894c6882f5fdd4a40e02c7dd628829a"

The program computes non-trivial operations on the test data. It checks the validity of test data, implements a Point class,
instantiates Point objects, finds neighbours for each of the Points, implements a Graph class, generates
the Minimum Spanning Tree (MST), and renders the MST as an image.

Minimum spanning tree example
...........................

## design
The program is structured according to five sets of tasks:
1. Check the validity of test data.
2. Implement a Point class, and use x/y coordinate values for instantiating Point objects.
3. Find all neighbours, within a certain distance of (0 < distance <= 20), for each of the Points.
   Regard straight lines, connecting these neighbours, as edges of a graph. Implement a Graph class
   using the Point objects to represent vertices, and the computed distances as weights.
4. Generate the Minimum Spanning Tree (MST).
5. Use SVG for rendering the MST as an image.

The program uses SHA256 from the SHA-2 family of hash algorithms to check the validity of the data. It calculates a SHA256 checksum
of a string that contains the concatenated y values. SHA-2 is a family of strong cryptographic hash functions.

Point class creates a Point object with x and y coordinates and distance() method that returns the distance between two Point objects.
Point class is used for instantiating 100 Point objects that are considered as vertices of the graph.

The Graph is stored in memory as an adjacency list for which a dictionary data structure is used. The adjacency list is better than an adjacency matrix
when the graph is going to be sparse and we may need to add or delete the nodes in the graph frequently. Also the Graph is allocated as
the list of vertices and the list of tuples with edges and their weights.

The interface of the Graph class:
     Graph Method                                     What It Does
g = Graph(points)                       Returns a Graph object with the given points representing vertices and the computed distances as weights.
g.add_vertex()                          Finds all neighbours, within a certain distance for the Point.
g.add_edge()                            Creates a tuple that forms the edge with a weight in the graph.
g.search()                              Visits all the vertices of the graph and returns the list.
g.find()                                Determines which set a particular element is in.
g.union()                               Merges two sets containing x and y.
g.spanning_tree()                       Constructs a minimum spanning tree from a weighted, undirected graph.
g.mst_svg()                             Generates the SVG image that represents the minimum spanning tree.
g.__str__()                             Returns a string representation of the graph edges and weights.

For the search Graph algorithm the Breadth-first search approach is used. It works level by level. A queue data structure is applied
to store the information of vertices that are to be visited in a graph.

The program generates the minimum spanning tree using the Kruskalâ€™s Minimum Spanning Tree algorithm. The Kruskal's algorithm is chosen
because it works better for a sparse graph. Union Find data structure for the algorithm is implemented by tree.

A Python 3 library drawsvg 2 is used for generating the svg image of the constructed minimum spanning tree. It is available on PyPI and
has a big collection of functions for rendering lines, shapes, and text.


